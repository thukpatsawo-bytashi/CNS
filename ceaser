#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <time.h>

// Function to encrypt a string using a Caesar cipher
void encrypt(int key, char* tt) {
    char ch;
    for (int i = 0; tt[i] != '\0'; ++i) {
        ch = tt[i];

        if (isalpha(ch)) {
            key = key % 26;
            if (islower(ch)) {
                ch = (ch - 'a' + key + 26) % 26 + 'a';
            } else {
                ch = (ch - 'A' + key + 26) % 26 + 'A';
            }
        } else if (isdigit(ch)) {
            key = key % 10;
            ch = (ch - '0' + key + 10) % 10 + '0';
        } else {
            if (ch >= 32 && ch <= 126) {
                key = key % 95;
                ch = (ch - 32 + key + 95) % 95 + 32;
            }
        }
        tt[i] = ch;
    }
}

// Function to decrypt a string using a Caesar cipher
void decrypt(int key, char* tt) {
    char ch;
    for (int i = 0; tt[i] != '\0'; ++i) {
        ch = tt[i];

        if (isalpha(ch)) {
            key = key % 26;
            if (islower(ch)) {
                ch = (ch - 'a' - key + 26) % 26 + 'a';
            } else {
                ch = (ch - 'A' - key + 26) % 26 + 'A';
            }
        } else if (isdigit(ch)) {
            key = key % 10;
            ch = (ch - '0' - key + 10) % 10 + '0';
        } else {
            if (ch >= 32 && ch <= 126) {
                key = key % 95;
                ch = (ch - 32 - key + 95) % 95 + 32;
            }
        }
        tt[i] = ch;
    }
}

int main() {
    char original_text[500];
    char encrypted_text[500];
    int key;
    clock_t start_time, end_time;
    double cpu_time_used;

    printf("Enter a message: ");
    if (fgets(original_text, sizeof(original_text), stdin) == NULL) {
        printf("Error reading input.\n");
        return 1;
    }

    for (int i = 0; original_text[i] != '\0'; ++i) {
        if (original_text[i] == '\n') {
            original_text[i] = '\0';
            break;
        }
    }

    printf("Enter the key: ");
    scanf("%d", &key);

    printf("\nOriginal Message: %s\n", original_text);

    // Copy original_text to encrypted_text for modification
    strcpy(encrypted_text, original_text);

    // Measure encryption time
    start_time = clock();
    encrypt(key, encrypted_text);
    end_time = clock();
    cpu_time_used = ((double)(end_time - start_time)) / CLOCKS_PER_SEC;

    printf("Encrypted Message: %s\n", encrypted_text);
    printf("Encryption time: %f seconds\n", cpu_time_used);

    // Measure decryption time
    start_time = clock();
    decrypt(key, encrypted_text);
    end_time = clock();
    cpu_time_used = ((double)(end_time - start_time)) / CLOCKS_PER_SEC;

    printf("Decrypted Message: %s\n", encrypted_text);
    printf("Decryption time: %f seconds\n", cpu_time_used);

    return 0;
}
